{"version":3,"sources":["components/ListTransaction/ListTransactions.module.scss","screens/Main/Main.module.scss","screens/Config/Config.module.scss","static/images/aCheckin-SC.png","screens/Loading/Loading.module.scss","constants/configs.js","serviceWorker.js","components/ResizeableQRCode/ResizeableQRCode.jsx","apollo/fragments/AuthFragment.js","apollo/mutations/InitMutation.js","apollo/hooks/useInitMutation.js","apollo/mutations/RefreshMutation.js","apollo/hooks/useRefreshMutation.js","apollo/fragments/TransactionFragment.js","apollo/queries/TransactionsQuery.js","components/ListTransaction/ListTransaction.jsx","apollo/hooks/useTransactionsQuery.js","constants/transactionStatus.js","screens/Main/Main.jsx","screens/Config/Config.jsx","screens/Loading/Loading.jsx","App.jsx","apollo/client.js","index.js"],"names":["module","exports","ListTransaction","Main","Config","__webpack_require__","p","Loading","process","d","__webpack_exports__","CONFIG_SAVE_PATH","os","browser","window","require","join","homedir","getConfigs","e","Boolean","location","hostname","match","forwardRef","_ref","ref","getSize","value","className","_useState","useState","_useState2","Object","slicedToArray","forceUpdate","useImperativeHandle","redraw","Date","getTime","react_default","a","createElement","lib_default","size","gql","_templateObject","InitMutation_templateObject","AuthFragment","nodeMachineId","crypto","defaultOnError","RefreshMutation_templateObject","TransactionFragment_templateObject","TransactionsQuery_templateObject","TransactionFragment","data","_ref$offset","offset","limit","_ref$onCompleted","onCompleted","_ref$onError","onError","params","objectWithoutProperties","queryResult","useQuery","objectSpread","query","TransactionsQuery","variables","notifyOnNetworkStatusChange","total","get","listTrans","hasMore","length","fetchMore","updateQuery","prevData","_ref2","fetchMoreResult","update","allTransaction","$set","$push","useTransactionsQuery","console","log","classNames","styles","react_custom_scrollbars_lib","style","width","height","noscrollx","map","Card","Body","Title","Media","src","alt","status","Badge","pill","variant","ListGroup","Item","Row","Col","Footer","Button","container","useRef","resizeDebounce","qrCode","useEffect","elementResizeEvent","current","cancel","debounce","unbind","components_ResizeableQRCode_ResizeableQRCode","document","documentElement","clientWidth","components_ListTransaction_ListTransaction","remote","app","dialog","fs","configSchema","yup","shape","ID","required","HOST_API","HOST_SOCKET","PATH_SOCKET","SECRET_KEY_MACHINE","EXTERNALS","DOOR","logo","onClick","showOpenDialog","title","buttonLabel","filters","name","extensions","properties","files","filePath","existsSync","configData","isValidSync","writeFileSync","JSON","stringify","relaunch","quit","alert","schedule","App","_useInitMutation","arguments","undefined","loading","setLoading","_useState3","_useState4","error","setError","client","useClient","asyncToGenerator","regenerator_default","mark","_callee","vars","obj","args","hash","_ref3","access_token","refresh_token","wrap","_context","prev","next","id","configs","machine_id","machineIdSync","ts","moment","valueOf","keys","sort","forEach","key","k","createHash","digest","mutate","mutation","InitMutation","sent","localStorage","setItem","t0","finish","stop","apply","this","useInitMutation","_useInitMutation2","init","_useRefreshMutation","rToken","RefreshMutation","_x","useRefreshMutation","refreshToken","scheduleJob","getItem","screens_Loading_Loading","screens_Main_Main","screens_Config_Config","apollo_client","ApolloClient","cache","InMemoryCache","link","ApolloLink","from","ApolloLinkTimeout","HttpLink","uri","ReactDOM","render","react_apollo_browser_umd","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b566ea3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ListTransaction\":\"ListTransactions_ListTransaction__2L6IU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Main_Main__2uElM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Config\":\"Config_Config__2dKE2\"};","module.exports = __webpack_public_path__ + \"static/media/aCheckin-SC.6e48d838.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loading\":\"Loading_Loading__3sNNG\"};","const os = process.browser ? window.require('os') : require('os');\nconst path = process.browser ? window.require('path') : require('path');\n\nexport const CONFIG_SAVE_PATH = path.join(os.homedir(), '.aCheckin', 'config.json');\n\nconst getConfigs = () => {\n  try {\n    return window.require(CONFIG_SAVE_PATH);\n  } catch (e) {\n    return null;\n  }\n};\n\nexport default getConfigs();\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState, useImperativeHandle, forwardRef } from 'react';\nimport { func, string } from 'prop-types';\nimport QRCode from 'qrcode.react';\n\nconst ResizeableQRCode = ({ getSize, value, className }, ref) => {\n  /* eslint-disable no-unused-vars */\n  const [_, forceUpdate] = useState();\n  useImperativeHandle(ref, () => ({\n    redraw: () => forceUpdate(new Date().getTime()),\n  }));\n\n  return <QRCode size={getSize()} value={value} className={className} />;\n};\n\nResizeableQRCode.propTypes = {\n  getSize: func.isRequired,\n  value: string.isRequired,\n  className: string,\n};\n\nexport default forwardRef(ResizeableQRCode);\n","import gql from 'graphql-tag';\n\nexport default gql`\n  fragment AuthFragment on MachineInit {\n    id\n    name\n    access_token\n    refresh_token\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport AuthFragment from '../fragments/AuthFragment';\n\nexport default gql`\n  mutation Init($id: String!, $machine_id: String!, $ts: Float!, $hash: String!) {\n    init(id: $id, machine_id: $machine_id, ts: $ts, hash: $hash) {\n      ...AuthFragment\n    }\n  }\n  ${AuthFragment}\n`;\n","import { useState } from 'react';\nimport { useClient } from 'react-apollo';\nimport moment from 'moment';\n\nimport configs from '@/constants/configs';\nimport InitMutation from '../mutations/InitMutation';\n\nconst nodeMachineId = window.require('node-machine-id');\nconst crypto = window.require('crypto');\n\nconst defaultOnError = (e) => {\n  throw e;\n};\n\nexport default ({ onCompleted = () => {}, onError = defaultOnError, ...params } = {}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const client = useClient();\n\n  const init = async () => {\n    try {\n      setLoading(true);\n      const vars = {\n        id: configs.ID,\n        machine_id: nodeMachineId.machineIdSync(),\n        ts: moment().valueOf(),\n      };\n\n      const obj = {};\n      Object.keys(vars).sort().forEach((key) => { obj[key] = vars[key]; });\n      const args = Object.keys(obj).map((k) => { return obj[k]; });\n      const hash = crypto.createHash('sha256').update(args.join('') + configs.SECRET_KEY_MACHINE).digest('hex');\n      const { access_token, refresh_token } = await client.mutate({\n        mutation: InitMutation,\n        variables: { ...vars, hash },\n        ...params,\n      });\n      localStorage.setItem('access_token', access_token);\n      localStorage.setItem('refresh_token', refresh_token);\n      onCompleted();\n    } catch (e) {\n      console.error(e);\n      setError(e);\n      onError(e);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return [init, { loading, error }];\n};\n","import gql from 'graphql-tag';\n\nimport AuthFragment from '../fragments/AuthFragment';\n\nexport default gql`\n  mutation RefreshToken($refresh_token: String!) {\n    renewToken(refresh_token: $refresh_token) {\n      ...AuthFragment\n    }\n  }\n  ${AuthFragment}\n`;\n","import { useState } from 'react';\nimport { useClient } from 'react-apollo';\n\nimport RefreshMutation from '../mutations/RefreshMutation';\n\nconst defaultOnError = (e) => {\n  throw e;\n};\n\nexport default ({ onCompleted = () => {}, onError = defaultOnError, ...params } = {}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const client = useClient();\n\n  const refreshToken = async (rToken) => {\n    try {\n      setLoading(true);\n      const { access_token, refresh_token } = await client.mutate({\n        mutation: RefreshMutation,\n        variables: { refresh_token: rToken },\n        ...params,\n      });\n      localStorage.setItem('access_token', access_token);\n      localStorage.setItem('refresh_token', refresh_token);\n      onCompleted();\n    } catch (e) {\n      console.error(e);\n      setError(e);\n      onError(e);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return [refreshToken, { loading, error }];\n};\n","import gql from 'graphql-tag';\n\nexport default gql`\n  fragment TransactionFragment on Transaction {\n    id\n    fee\n    total\n    date\n    status\n    products {\n      name\n      price\n      quantity\n    }\n    staff {\n      id\n      name\n      avatar\n    }\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport TransactionFragment from '../fragments/TransactionFragment';\n\nexport default gql`\n  query Transactions($offset: Float, $limit: Float) {\n    allTransaction(offset: $offset, limit: $limit) {\n      offset\n      limit\n      total\n      data {\n        ...TransactionFragment\n      }\n    }\n  }\n  ${TransactionFragment}\n`;\n","import React from 'react';\nimport { string } from 'prop-types';\nimport { Row, Col, ListGroup, Card, Media, Button, Badge } from 'react-bootstrap';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport classNames from 'classnames';\n\nimport { useTransactionsQuery } from '@/apollo';\nimport { INIT, WAITING, RECEIVED, REFUNDED } from '@/constants/transactionStatus';\n\nimport styles from './ListTransactions.module.scss';\n\nconst ListTransaction = ({ className }) => {\n  const { data } = useTransactionsQuery({ offset: 0, limit: 20 });\n  console.log(data);\n  const rendeStatusBadge = (status) => {\n    if (status === INIT || status === WAITING) {\n      return <Badge pill variant=\"secondary\">Đang chờ</Badge>;\n    }\n    if (status === REFUNDED) {\n      return <Badge pill variant=\"danger\">Đã hoàn trả</Badge>;\n    }\n    return <Badge pill variant=\"primary\">Đã hoàn thành</Badge>;\n  };\n\n  return (\n    <div className={classNames(styles.ListTransaction, className)}>\n      <div className=\"header\">\n        <h4>Danh sách giao dịch</h4>\n      </div>\n      <Scrollbars className=\"scrollbar\" style={{ width: '100%', height: '100%' }} noscrollx=\"true\">\n        <div className=\"p-3\">\n          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(() => (\n            <Card className=\"shadow mb-3\">\n              <Card.Body>\n                <Card.Title>\n                  <Media>\n                    <img\n                      className=\"staff-avatar mr-3\"\n                      src=\"http://jeanbaptiste.bayle.free.fr/AVATAR/grey_81618-default-avatar-200x200.jpg\"\n                      alt=\"avatar\"\n                    />\n                    <Media.Body className=\"align-self-center\">\n                      <h5 className=\"mb-1\">Đặng Hoàng Long</h5>\n                      {rendeStatusBadge(RECEIVED)}\n                    </Media.Body>\n                  </Media>\n                </Card.Title>\n                <ListGroup variant=\"flush\">\n                  {[1, 2, 3].map(() => (\n                    <ListGroup.Item>\n                      <Row>\n                        <Col className=\"d-flex\">\n                          <div className=\"product-name mr-1\">asdasd</div>\n                          <div>x1</div>\n                        </Col>\n                        <Col className=\"text-right\">12312312VNĐ</Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                  <ListGroup.Item variant=\"secondary\" className=\"border-0\">\n                    <Row>\n                      <Col>Phí</Col>\n                      <Col className=\"text-right\">1312VNĐ</Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item variant=\"secondary\" className=\"border-0\">\n                    <Row>\n                      <Col>\n                        <h5>TỔNG</h5>\n                      </Col>\n                      <Col className=\"text-right\">\n                        <h5>12312312VNĐ</h5>\n                      </Col>\n                    </Row>\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n              <Card.Footer className=\"text-right\">\n                <Button>Hoàn thành</Button>\n              </Card.Footer>\n            </Card>\n          ))}\n        </div>\n      </Scrollbars>\n    </div>\n  );\n};\n\nListTransaction.propTypes = {\n  className: string,\n};\n\nexport default ListTransaction;\n","import { get } from 'lodash';\nimport { useQuery } from 'react-apollo';\nimport update from 'immutability-helper';\n\nimport TransactionsQuery from '../queries/TransactionsQuery';\n\nexport default ({\n  offset = 0,\n  limit,\n  onCompleted = () => {},\n  onError = () => {},\n  ...params\n}) => {\n  const queryResult = useQuery({\n    query: TransactionsQuery,\n    variables: { offset, limit },\n    notifyOnNetworkStatusChange: true,\n    onCompleted,\n    onError,\n    ...params,\n  });\n\n  const total = get(queryResult.data, 'allTransaction.total', 0);\n  const listTrans = get(queryResult.data, 'allTransaction.data', []);\n  const hasMore = listTrans.length < total;\n  const data = get(queryResult.data, 'allTransaction', {});\n\n  const fetchMore = () => {\n    queryResult.fetchMore({\n      variables: { offset: listTrans.length },\n      updateQuery: (prevData, { fetchMoreResult }) => {\n        if (!fetchMoreResult) {\n          return prevData;\n        }\n        return update(prevData, {\n          allTransaction: {\n            total: { $set: fetchMoreResult.allTransaction.total },\n            data: { $push: fetchMoreResult.allTransaction.data },\n          },\n        });\n      },\n    });\n  };\n\n  return { ...queryResult, data, hasMore, fetchMore };\n};\n","export const INIT = 'INIT';\nexport const WAITING = 'WAITING';\nexport const RECEIVED = 'RECEIVED';\nexport const REFUNDED = 'REFUNDED';\n","import React, { useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport debounce from 'lodash.debounce';\nimport elementResizeEvent from 'element-resize-event';\n\nimport ResizeableQRCode from '@/components/ResizeableQRCode';\nimport ListTransaction from '@/components/ListTransaction';\n\nimport styles from './Main.module.scss';\n\nconst Main = () => {\n  const container = useRef();\n  const resizeDebounce = useRef();\n  const qrCode = useRef();\n\n  useEffect(() => {\n    elementResizeEvent(container.current, () => {\n      if (resizeDebounce.current) {\n        resizeDebounce.current.cancel();\n      }\n      resizeDebounce.current = debounce(() => qrCode.current.redraw(), 200);\n      resizeDebounce.current();\n    });\n\n    return () => {\n      elementResizeEvent.unbind(container.current);\n      if (resizeDebounce.current) {\n        resizeDebounce.current.cancel();\n      }\n    };\n  }, []);\n\n  const getQRCodeSize = () => {\n    if (document.documentElement.clientWidth / 4 > 100) {\n      return document.documentElement.clientWidth / 4;\n    }\n    return 100;\n  };\n\n  return (\n    <div ref={container} className={classNames(styles.Main, 'h-100 d-flex')}>\n      <div className=\"main\">\n        <div className=\"text-center\">\n          <h1 className=\"mb-4 text-light\">QR CODE</h1>\n          <ResizeableQRCode\n            ref={qrCode}\n            getSize={getQRCodeSize}\n            value=\"12313123123\"\n            className=\"qrcode\"\n          />\n        </div>\n      </div>\n      <div className=\"list-transaction\">\n        <ListTransaction />\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport * as yup from 'yup';\n\nimport { CONFIG_SAVE_PATH } from '@/constants/configs';\n\nimport styles from './Config.module.scss';\nimport logo from '@/static/images/aCheckin-SC.png';\n\nconst { app, dialog } = window.require('electron').remote;\nconst fs = window.require('fs');\n\nconst configSchema = yup.object().shape({\n  ID: yup.string().required(),\n  HOST_API: yup.string().required(),\n  HOST_SOCKET: yup.string().required(),\n  PATH_SOCKET: yup.string().required(),\n  SECRET_KEY_MACHINE: yup.string().required(),\n  EXTERNALS: yup.array(),\n  DOOR: yup.number().required(),\n});\n\nconst Config = () => {\n  const selectFile = () => {\n    dialog.showOpenDialog(\n      {\n        title: 'Chọn file cấu hình',\n        buttonLabel: 'Chọn',\n        filters: [{ name: 'JSON', extensions: ['json'] }],\n        properties: ['openFile'],\n      },\n      (files) => {\n        const filePath = (files || [files])[0];\n        if (!filePath) {\n          return;\n        }\n        if (!fs.existsSync(filePath)) {\n          alert('File not found');\n          return;\n        }\n        const configData = window.require(filePath);\n        if (configSchema.isValidSync(configData)) {\n          fs.writeFileSync(CONFIG_SAVE_PATH, JSON.stringify(configData));\n          app.relaunch();\n          app.quit(0);\n        } else {\n          alert('File config invalid');\n        }\n      },\n    );\n  };\n\n  return (\n    <div className={styles.Config}>\n      <img className=\"logo\" src={logo} alt=\"logo\" />\n      <Button onClick={selectFile}>Vui lòng chọn file cấu hình</Button>\n    </div>\n  );\n};\n\nexport default Config;\n","import React from 'react';\n\nimport styles from './Loading.module.scss';\n\nconst Loading = () => {\n  return (\n    <div className={styles.Loading}>\n      <h1 className=\"text-light\">Initializing...</h1>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React, { useEffect } from 'react';\n\nimport Main from '@/screens/Main';\nimport Config from '@/screens/Config';\nimport Loading from '@/screens/Loading';\n\nimport configs from '@/constants/configs';\nimport { useInitMutation, useRefreshMutation } from '@/apollo';\n\nconst schedule = window.require('node-schedule');\n\nconst App = () => {\n  const [init, { loading }] = useInitMutation();\n  const [refreshToken] = useRefreshMutation();\n\n  useEffect(() => {\n    if (!configs) {\n      return;\n    }\n\n    init();\n\n    schedule.scheduleJob('0 0 0 * * *', () => {\n      const rToken = localStorage.getItem('refresh_token');\n      if (rToken) {\n        refreshToken(rToken);\n      }\n    });\n  }, []);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  if (!configs) {\n    return <Config />;\n  }\n\n  return (\n    <Main />\n  );\n};\n\nexport default App;\n","import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloLink } from 'apollo-link';\nimport ApolloLinkTimeout from 'apollo-link-timeout';\n\nimport configs from '@/constants/configs';\n\nexport default new ApolloClient({\n  cache: new InMemoryCache(),\n  link: ApolloLink.from([\n    new ApolloLinkTimeout(5000),\n    new HttpLink({\n      uri: () => configs.HOST_API,\n    }),\n  ]),\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nimport client from './apollo/client';\n\nimport './index.scss';\n\n/* eslint-disable react/jsx-filename-extension */\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}